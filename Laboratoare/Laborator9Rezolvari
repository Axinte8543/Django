1.Folosiți framework-ul de mesaje în cadrul aplicației. Folosiți fiecare tip de mesaj (debug, info, succes, warning, error) de minim 2 ori în cadrul aplicației în locuri relevante.

Adaugam in views.py messages.debug,messages.info....
messages.debug nu o sa se vada utilizatorului

2.Generați un sitemap pentru aplicație incluzând toate modelele relevante (nu uitati sa faceti paginile proprii pentru modele, de exemplu: /model/id) și 
paginile statice care nu depind de logarea utilizatorilor.

models.py
class Film(models.Model):
    IDFilm = models.PositiveIntegerField(primary_key=True, unique=True)
    IDProdus = models.OneToOneField(Produs, on_delete=models.CASCADE)
    Titlu = models.CharField(max_length=50)
    ActorPrincial = models.CharField(max_length=40)
    Gen = models.CharField(max_length=30)
    EsteRomanesc = models.BooleanField()
    Rating = models.CharField(max_length=10)
    Pret = models.DecimalField(max_digits=8, decimal_places=2)
    DescriereFilm = models.TextField()
    actualizat_la = models.DateTimeField(auto_now=True)    --facem asta pentru modelele Film, Carte si Album
    
    def get_absolute_url(self): --facem asta pentru modelele Film, Carte si Album
         return reverse("film", kwargs={'id': self.IDFilm})


sitemaps.py

from django.contrib.sitemaps import Sitemap
from django.urls import reverse
from .models import Carte, AlbumMuzical, Film, Produs


class CarteSitemap(Sitemap):
    changefreq = "yearly"
    priority = 0.5

    def items(self):
        return Carte.objects.all()

    def lastmod(self, obj):
        return obj.actualizat_la
    
class AlbumMuzicalSitemap(Sitemap):
    changefreq = "yearly"
    priority = 0.5

    def items(self):
        return AlbumMuzical.objects.all()

    def lastmod(self, obj):
        return obj.actualizat_la

class FilmSitemap(Sitemap):
    changefreq = "yearly"
    priority = 0.5

    def items(self):
        return Film.objects.all()

    def lastmod(self, obj):
        return obj.actualizat_la
    
class VederiStaticeSitemap(Sitemap):
    priority = 0.5
    changefreq = 'yearly'

    def items(self):
        return ['mesaj_trimis']

    def location(self, item):
        return reverse(item)


urls.py
from django.contrib.sitemaps.views import sitemap
from .sitemaps import CarteSitemap, AlbumMuzicalSitemap, FilmSitemap, ProdusSitemap, VederiStaticeSitemap

sitemaps = {
    'carte': CarteSitemap,
    'album': AlbumMuzicalSitemap,
    'film': FilmSitemap,
    'static': VederiStaticeSitemap,
}
urlpatterns = [
    path('carte/<int:id>/', views.carte, name='carte'),
    path('album/<int:id>/', views.album, name='album'),
    path('film/<int:id>/', views.film, name='film'),
    path('sitemap.xml', sitemap, {'sitemaps': sitemaps}, name='django.contrib.sitemaps.views.sitemap'),
  ]


views.py
def carte(request, id):
    carte = get_object_or_404(Carte, IDCarte=id)
    return render(request, 'aplicatiedjango/carte.html', {'carte': carte})

def album(request, id):
    album = get_object_or_404(AlbumMuzical, IDAlbum=id)
    return render(request, 'aplicatiedjango/albume.html', {'album': album})

def film(request, id):
    film = get_object_or_404(Film, IDFilm=id)
    return render(request, 'aplicatiedjango/film.html', {'film': film})


3.Implementați următoarele taskuri programate (scheduled):
La fiecare K minute se vor șterge utilizatorii care sunt înregistrați dar nu au e-mail confirmat. Setati voi K convenabil (de exemplu K=2).
În fiecare zi din saptamana Z și oră O (completați Z și O cu o zi și o oră convenabilă, de exemplu Z=luni) se va trimite un newsletter către toți utilizatorii mai vechi de X minute (alegeți voi X).
Mai implementați încă 2 taskuri programate la alegere care să fie relevante pentru proiectul vostru:
unul care să se repete la fiecare M minute (alegeți voi M).
altul care să fie programat în fiecare zi Z2 și oră O2 (alegeți voi Z2 si O2).

ruleaza_taskuri.py
import schedule
import time
import os
import django
import sys

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proiectdjango.settings')
django.setup()

from aplicatiedjango import tasks

def run_scheduler():
    schedule.every(2).minutes.do(tasks.task1)
    schedule.every().monday.at("13:15").do(tasks.task2)
    schedule.every(30).minutes.do(tasks.task3)
    schedule.every().wednesday.at("09:00").do(tasks.task4)
    
    while True:
        schedule.run_pending()
        time.sleep(1)
        
if __name__ == '__main__':
    try:
        run_scheduler()
    except KeyboardInterrupt:
        print("Scheduler oprit manual.")
        sys.exit()

tasks.py

import schedule
import time
import os
import django
from .models import CustomUser
from datetime import timedelta
from django.utils import timezone
from django.core.mail import send_mail

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proiectdjango.settings')
django.setup()

def task1():
    users=CustomUser.objects.all()
    for user in users:
        if user.confirmare_email==False:
           user.delete()
           
def task2():
    users=CustomUser.objects.all()
    timpinregistrat = timezone.now() - timedelta(minutes=60)
    users = CustomUser.objects.filter(date_joined__lt=timpinregistrat)
    for user in users:
           send_mail(
               'Newsletter',
               'Bine ati venit pe site-ul nostru!',
               'iniminiminimo3@gmail.com',
               [user.email],
               fail_silently=False,
           )

def task3(): --daca utilizatorul nu a intrat de mai mult de 30 de minute ii dam mail-ul asta
    ultimulintrat=timezone.now()-timedelta(minutes=30)
    users=CustomUser.objects.filter(last_login__lt=ultimulintrat)
    for user in users:
        send_mail(
            'Reamintire',
            'Utilizatorule, nu ai mai intrat de mult pe site-ul nostru, te asteptam cu drag!',
            'iniminiminimo3@gmail.com',
            [user.email],
            fail_silently=False,
        )
    
def task4(): --daca utilizatorul este in staff infiecare miercuri o sa primeasca mesaj ca programul de lucru este pana la 3 in ziua respectiva
    users=CustomUser.objects.all()
    for user in users:
        if user.is_staff==True:
            send_mail(
                'Draga adminule',
                'Nu uita ca astezi este miercuri, si ziua de lucru este pana la ora 15:00',
                'iniminiminimo3@gmail.com',
                [user.email],
                fail_silently=False,
            )

4.Se va crea un grup numit Moderatori. Pentru user veți adăuga și un câmp boolean numit "blocat". Un moderator va avea următoarele drepturi:
va putea intra in interfața admin
vizualizarea utilizatorilor (din permisiunile implicite ale modelului)
editarea câmpurilor: nume, prenume și e-mail
blocarea/deblocarea utilizatorilor.
Un utilizator care este blocat nu se poate loga pe site. Dacă utilizatorul va încerca să se logheze, va primi un mesaj de eroare  prin care i se spune că i-a fost contul blocat.

Adaugam blocat in models.py
Adaugam in functia custom login view din views.py:
if user.blocat == True:
               return HttpResponseForbidden(render(request, 'aplicatiedjango/403html1.html', {'titlu': 'Eroare autentificare', 'mesaj': 'Contul este blocat.'}))         

Cream fisierul html 403html1.html
