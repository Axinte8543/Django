1.class Filme(forms.Form):
    IDFilm = forms.IntegerField(label='IDFilm', required=True)
    IDProdus = forms.IntegerField(label='IDProdus', required=True)
    Titlu = forms.CharField(max_length=50, label='Titlu', required=True)
    ActorPrincipal = forms.CharField(max_length=40, label='ActorPrincipal', required=False)
    Gen = forms.CharField(max_length=30, label='Gen', required=False)
    EsteRomanesc = forms.BooleanField(label='EsteRomanesc', required=False)
    Rating = forms.CharField(max_length=10, label='Rating', required=False)
    Pret = forms.DecimalField(max_digits=8, decimal_places=2, label='Pret', required=False)
    DescriereFilm = forms.CharField(widget=forms.Textarea, label='DescriereFilm', required=False)


def filme123(request):
    filme = Film.objects.all()
    if request.method == 'POST':
        form = Filme(request.POST)
        if form.is_valid():
            if form.cleaned_data['IDFilm']:
                filme = filme.filter(IDFilm=form.cleaned_data['IDFilm']) #Verifică dacă câmpul IDFilm din formular a fost completat.Dacă da, filtrează queryset-ul filme pentru a include doar filmele care au IDFilm egal cu valoarea specificată în formular.
            if form.cleaned_data['IDProdus']:
                filme = filme.filter(IDProdus=form.cleaned_data['IDProdus'])
            if form.cleaned_data['Titlu']:
                filme = filme.filter(Titlu__icontains=form.cleaned_data['Titlu'])
            if form.cleaned_data['ActorPrincipal']:
                filme = filme.filter(ActorPrincipal__icontains=form.cleaned_data['ActorPrincipal'])
            if form.cleaned_data['Gen']:
                filme = filme.filter(Gen__icontains=form.cleaned_data['Gen'])
            if form.cleaned_data['EsteRomanesc'] is not None:
                filme = filme.filter(EsteRomanesc=form.cleaned_data['EsteRomanesc'])
            if form.cleaned_data['Rating']:
                filme = filme.filter(Rating__icontains=form.cleaned_data['Rating'])
            if form.cleaned_data['Pret']:
                filme = filme.filter(Pret=form.cleaned_data['Pret'])
            if form.cleaned_data['DescriereFilm']:
                filme = filme.filter(DescriereFilm__icontains=form.cleaned_data['DescriereFilm'])
            return redirect('mesaj_trimis')
    else:
        form = Filme()
    paginator = Paginator(filme, 10)  
    page_number = request.GET.get('page')
    filme = paginator.get_page(page_number)    
    return render(request, 'aplicatiedjango/filme.html', {'form': form})

<!DOCTYPE HTML>
<html>
<head>
    <title>Proiect Django</title>
</head>
<body>
      <form method="post">
        {% csrf_token%}
        {% for field in form %}
            <div class="form-group">
                <label for="{{ field.id_for_label }}">{{ field.label }}</label>
                {{ field }}
                {% if field.help_text %}
                    <small>{{ field.help_text }}</small>
                {% endif %}
                {%if field.errors%}
                    <div class="error">
                    {% for error in field.errors %}
                        <p>{{ error }}</p>
                    {% endfor %}
                    </div>
                {% endif %}
            </div>
        {% endfor %}
        <button type="submit">Trimite</button>
    </form>    
    </body>
</html>


2.def text(value):
    if not value[0].isupper() or not all(char.isalpha() or char.isspace() for char in value):
        raise ValidationError("Textul trebuie sa inceapa cu litera mare si sa contina doar litere")
        
class PaginaContact(forms.Form):
    nume = forms.CharField(label='Nume', max_length=10, required=True, validators=[text])
    prenume = forms.CharField(label='Prenume', validators=[text])
    datanasterii = forms.DateField(label='Data nasterii', required=False)
    email = forms.EmailField(label='Email', required=True)
    confirmaremaiil = forms.EmailField(label='Confirmare email', required=True)
    tipmesaj = forms.ChoiceField(label='Tip mesaj', choices=[('1', 'Reclamatie'), ('2', 'Intrebare'), ('3', 'Review'), ('4', 'Cerere'), ('5', 'Programare')])
    subiect = forms.CharField(label='Subiect',required=True)
    minimzileasteptare = forms.IntegerField(label='Minim zile asteptare', required=False)
    mesaj = forms.CharField(widget=forms.Textarea, label='Mesaj (va rugam sa va semnati)', required=True, validators=[text])
    
    def clean_minimzileasteptare(self):
        data = self.cleaned_data['minimzileasteptare']
        if data < 0 and data!=None:   
            raise forms.ValidationError("Numarul de zile nu poate fi negativ")
        return data

    def clean(self):
            cleaned_data = super().clean() 
            email = cleaned_data.get("email") 
            confirm_email = cleaned_data.get("confirmareemail")
            if email and confirm_email and email != confirm_email:
                raise forms.ValidationError("Adresele de email nu coincid.")
            return cleaned_data
        
    def datanasterii(self):
        cleaned_data = super().clean()
        data = self.cleaned_data['datanasterii']
        if data:
            cleaned_data['varsta'] = self.calculate_age(data)
            del cleaned_data['datanasterii']
        return cleaned_data
    
    def varsta(self):   
        data=date.today()
        nastere=self.cleaned_data('datanasterii')
        years=data.year-nastere.year
        months=data.month-nastere.month
        if months<0:
            years=years-1
            months=months+12
        if years<18:
            raise forms.ValidationError("Trebuie sa ai minim 18 ani")  
        return f'Varsta: {years} ani si {months} luni' 

    def clean_mesaj(self):
            mesaj = self.cleaned_data.get('mesaj')
            words = re.findall(r'\b\w+\b', mesaj)
            word_count = len(words)
            if word_count < 5 or word_count > 100:
                raise forms.ValidationError("Mesajul trebuie sa contina intre 5 si 100 cuvinte.")
            mesaj = re.sub(r'\s+', ' ', mesaj.replace('\n', ' ')).strip()
            return mesaj
    
    def mesaj1(self):
        mesaj = self.cleaned_data.get('mesaj')
        if mesaj.startswith('https://') or mesaj.startswith('http://'):
            raise forms.ValidationError("Nu incepe mesajul cu https:// sau http://")
        return mesaj

    def mesaj2(self):
        mesaj = self.cleaned_data.get('mesaj')
        nume = self.cleaned_data.get('nume')
        if not mesaj.endswith(nume):
            raise forms.ValidationError("Mesajul trebuie sa se termine cu numele tau")
        return mesaj



def contact_view1(request):
    if request.method == 'POST':
        form = PaginaContact(request.POST)
        if form.is_valid():
            nume = form.cleaned_data['nume']
            prenume = form.cleaned_data['prenume']
            varsta = form.cleaned_data.get('varsta', 'N/A')
            email = form.cleaned_data['email']
            tipmesaj = form.cleaned_data['tipmesaj']
            subiect = form.cleaned_data['subiect']
            minimzileasteptare = form.cleaned_data['minimzileasteptare']
            mesaj = form.cleaned_data['mesaj']

            data = {
                'nume': nume,
                'prenume': prenume,
                'varsta': varsta,
                'email': email,
                'tipmesaj': tipmesaj,
                'subiect': subiect,
                'minimzileasteptare': minimzileasteptare,
                'mesaj': mesaj
            }

            timestamp = int(time.time())
            
            mesaje_folder = os.path.join(settings.BASE_DIR, 'myapp', 'mesaje')
            os.makedirs(mesaje_folder, exist_ok=True)

            file_name = f"mesaj_{timestamp}.json"
            file_path = os.path.join(mesaje_folder, file_name)
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=4, ensure_ascii=False)

            return redirect('mesaj_trimis')  
    else:
        form = PaginaContact()
    return render(request, 'aplicatiedjango/contact.html', {'form': form})





3.
def pozitiv(value):
    if value < 0:
        raise ValidationError("Numarul nu poate fi negativ")
class AlbumMuzical(forms.ModelForm):
    DurataAlbum = forms.IntegerField(label='DurataAlbum', required=True, validators=[pozitiv])
    Pret = forms.DecimalField(max_digits=8, decimal_places=2, label='Pret', required=True, validators=[pozitiv])
    Discount = forms.DecimalField(max_digits=8, decimal_places=2, label='Discount', required=False, validators=[pozitiv])
    PretFinal = forms.DecimalField(max_digits=8, decimal_places=2, label='PretFinal', required=False, validators=[pozitiv])
    class Meta:
        model = AlbumMuzical
        fields=['IDAlbum','IDProdus','Titlu', 'An', 'Artist', 'GenAlbum', 'NumarPiese','EsteRomanesc']
        labels ={'IDAlbum':'IDAlbum',
                 'IDProdus':'IDProdus',
                 'Titlu':'Titlu', 
                 'An':'An', 
                 'Artist':'Artist', 
                 'GenAlbum':'GenAlbum', 
                 'NumarPiese':'NumarPiese',
                 'EsteRomanesc':'EsteRomanesc'}
        error_messages = {
            'IDAlbum': {
                'required': 'ID-ul albumului este obligatoriu.',
                'invalid': 'Introduceți un număr valid.',
            },
            'IDProdus': {
                'required': 'ID-ul produsului este obligatoriu.',
                'invalid': 'Introduceți un număr valid.',
            },
            'Titlu': {
                'required': 'Titlul albumului este obligatoriu.',
                'max_length': 'Titlul nu poate avea mai mult de 100 de caractere.',
            },
            'An': {
                'required': 'Anul lansării este obligatoriu.',
                'invalid': 'Introduceți un an valid.',
            },
            'Artist': {
                'required': 'Artistul este obligatoriu.',
            },
            'GenAlbum': {
                'required': 'Genul albumului este obligatoriu.',
            },
            'NumarPiese': {
                'required': 'Numărul de piese este obligatoriu.',
                'invalid': 'Introduceți un număr valid.',
            },
            'EsteRomanesc': {
                'required': 'Trebuie să specificați dacă albumul este românesc sau nu.',}
        }
    def cleanartist(self):
        artist=self.cleaned_data.get('Artist')
        if not artist[0].isupper() or not all(char.isalpha() or char.isspace() for char in artist):
            raise forms.ValidationError("Artistul trebuie sa inceapa cu litera mare si sa contina doar litere")
        return artist
    def cleantitlu(self):
        titlu = self.cleaned_data.get('Titlu')
        if not re.match(r'^[a-zA-Z0-9\s\-,&]+$', titlu):
            raise forms.ValidationError(
                "Titlul poate conține doar litere, cifre, spații, '-', '&' sau ','."
            )
        return titlu
    def genalbum(self):
        genalbum = self.cleaned_data.get('GenAlbum')
        genuri_permise = ['Rock', 'Pop', 'Hip-Hop', 'Jazz', 'Clasic', 'Country', 'Reggae', 'Folk', 'Metal', 'Electronic']
        if genalbum not in genuri_permise:
            raise forms.ValidationError(
                f"Genul trebuie să fie unul dintre: {', '.join(genuri_permise)}."
            )
        return genalbum
    
    def clean(self):
        cleaned_data = super().clean()
        pret = cleaned_data.get('Pret')
        discount = cleaned_data.get('Discount')
        pret_final = cleaned_data.get('PretFinal')

        if discount is not None and pret is not None:
            pret_final_calculat = pret - (pret * discount / 100)
            if pret_final is None:
                cleaned_data['PretFinal'] = pret_final_calculat
            elif pret_final != pret_final_calculat:
                raise forms.ValidationError("Prețul final nu corespunde cu prețul și discount-ul specificate.")



def creare_album(request):
    if request.method == 'POST':
        form = AlbumMuzical(request.POST)
        if form.is_valid():
            album = form.save(commit=False)
            album.DurataAlbum = form.cleaned_data['DurataAlbum']
            album.Pret = form.cleaned_data['Pret']
            album.Discount = form.cleaned_data.get('Discount', 0)
            album.PretFinal = form.cleaned_data.get('PretFinal', album.Pret)           
            album.save()
            return redirect('mesaj_trimis')
    else:
        form=AlbumMuzical()
    return render(request, 'aplicatiedjango/album.html', {'form': form})


def creare_album(request):
    if request.method == 'POST':
        form = AlbumMuzical(request.POST)
        if form.is_valid():
            album = form.save(commit=False)
            album.DurataAlbum = form.cleaned_data['DurataAlbum']
            album.Pret = form.cleaned_data['Pret']
            album.Discount = form.cleaned_data.get('Discount', 0)
            album.PretFinal = form.cleaned_data.get('PretFinal', album.Pret)           
            album.save()
            return redirect('mesaj_trimis')
    else:
        form=AlbumMuzical()
    return render(request, 'aplicatiedjango/album.html', {'form': form})
