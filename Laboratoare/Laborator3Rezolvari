1.
Adaugam in models.py:
class Prajitura(models.Model):
    id=models.IntegerField(primary_key=True)
    nume=models.CharField(max_length=50)
    descriere=models.TextField()
    pret=models.DecimalField(max_digits=8, decimal_places=2)
    gramaj=models.IntegerField()
    calorii=models.IntegerField()
    pt_diabetici=models.BooleanField(default=False)
    imagine=models.CharField(max_length=100)
    data_adaugare=models.DateTimeField(auto_now_add=True)
    categ_prajitura=[('Comanda Speciala','Comanda Speciala'),
                    ('anivesara','Aniversara'),
                    ('editie limitata','Edititie Limitata'),
                    ('pentru copii','Pentru Copii'),
                    ('dietetica','Dietetica'),
                    ('comuna','Comuna')]
    categorie=models.CharField(default='cofetarie',choices=categ_prajitura)
    tipuri_produse=[('cofetarie','Cofetarie'),('patiserie','Patiserie'),('gelaterie','Gelaterie')] 
    ambalaj=models.ForeignKey('Ambalaj',on_delete=models.CASCADE)
    

class Ingredient(models.Model):
    nume=models.CharField(max_length=30,unique=True)
    calorii=models.PositiveIntegerField()
    unitate=models.CharField(max_length=10)
    conexiune=models.ManyToManyField(Prajitura)
    
class Ambalaj(models.Model):
    nume=models.CharField(max_length=20,unique=True)
    optiuni=[('plastic','Plastic'),('hartie','Hartie'),('cutie','Cutie')]
    material=models.CharField(choices=optiuni)
    pret=models.DecimalField(max_digits=5, decimal_places=2)
    

In Postgresql o sa adaugam:
select * from django.aplicatie_prajitura
order by id ASC;

select * from django.aplicatie_ambalaj;

INSERT INTO django.aplicatie_ambalaj (nume, material, pret)
VALUES ('Ambalaj Premium', 'plastic', 2.50);
Insert into django.aplicatie_prajitura (id, nume, descriere, pret, gramaj, calorii, pt_diabetici, imagine, data_adaugare, categorie, ambalaj_id)
VALUES
    (1, 'Tort Ciocolata', 'Tort cu ciocolată neagră și cremă fină', 150.00, 1200, 4000, false, 'tort_ciocolata.jpg', NOW(), 'Comanda Speciala', 1),
    (2, 'Ecler Vanilie', 'Ecler cu cremă de vanilie și glazură de ciocolată', 15.00, 150, 300, true, 'ecler_vanilie.jpg', NOW(), 'pentru copii', 1),
    (3, 'Cheesecake', 'Cheesecake clasic cu topping de fructe de pădure', 75.00, 500, 1200, false, 'cheesecake.jpg', NOW(), 'aniversara', 1);


views.py o sa avem:
from aplicatie.models import Prajitura #Importă modelul din aplicația ta.
def prajituri(request):
    prajituri = Prajitura.objects.all()
    return render(request, 'first_app/prajituri.html', {'prajituri': prajituri})

prajituri.html
<!-- aplicatia_ta/templates/prajituri.html -->
<!DOCTYPE html>
<html lang="ro">
<head>
    <meta charset="UTF-8">
    <title>Lista de Prajituri</title>
</head>
<body>
    <h1>Lista de Prajituri</h1>
    <ul>
        {% for prajitura in prajituri %}
            <li>
                <strong>{{ prajitura.nume }}</strong><br>
                Descriere: {{ prajitura.descriere }}<br>
                Preț: {{ prajitura.pret }} RON<br>
                Gramaj: {{ prajitura.gramaj }} g<br>
                Calorii: {{ prajitura.calorii }} kcal<br>
                {{ prajitura.categorie }}<br>
                Disponibil pentru diabetici: {{ prajitura.pt_diabetici|yesno:"Da,Nu" }}
            </li>
        {% endfor %}
    </ul>
</body>

3.
from django.db import models

class Magazin(models.Model):
     IDMagazin = models.PositiveIntegerField(primary_key=True, unique=True)
     Judet = models.CharField(max_length=20)
     Oras = models.CharField(max_length=20)
     Cartier = models.CharField(max_length=20)
     Strada = models.CharField(max_length=20)
     Email = models.EmailField(default='example@gmail.com')
     
class Produs(models.Model):
    IDProdus = models.PositiveIntegerField(primary_key=True, unique=True)
    Magazine = models.ManyToManyField(Magazin)
    
class AlbumMuzical(models.Model):
    IDAlbum = models.PositiveIntegerField(primary_key=True, unique=True)
    IDProdus = models.OneToOneField(Produs, on_delete=models.CASCADE)
    Titlu = models.CharField(max_length=50)
    An = models.PositiveIntegerField()
    Artist=models.CharField(max_length=30)
    DurataAlbum = models.PositiveIntegerField()
    NumarPiese= models.PositiveIntegerField()
    GenAlbum = models.CharField(max_length=30)
    Pret = models.DecimalField(max_digits=8, decimal_places=2)
    EsteRomanesc = models.BooleanField()
    
class Film(models.Model):
    IDFilm = models.PositiveIntegerField(primary_key=True, unique=True)
    IDProdus = models.OneToOneField(Produs, on_delete=models.CASCADE)
    Titlu = models.CharField(max_length=50)
    ActorPrincial = models.CharField(max_length=40)
    Gen = models.CharField(max_length=30)
    EsteRomanesc = models.BooleanField()
    Rating = models.CharField(max_length=10)
    Pret = models.DecimalField(max_digits=8, decimal_places=2)
    DescriereFilm = models.TextField()
    
class Carte(models.Model):
    IDCarte = models.PositiveIntegerField(primary_key=True, unique=True)
    IDProdus = models.OneToOneField(Produs, on_delete=models.CASCADE)
    Titlu = models.CharField(max_length=40)
    An = models.IntegerField()
    Editura = models.CharField(max_length=25)
    Autor = models.CharField(max_length=50)
    NumarPagini = models.PositiveIntegerField()
    Limba = models.CharField(max_length=30)
    Pret = models.DecimalField(max_digits=8, decimal_places=2)
    EsteRomaneasca = models.BooleanField()

class RecenzieCarte(models.Model):
    IDRecenzie = models.PositiveIntegerField(primary_key=True, unique=True)
    IDCarte = models.ForeignKey(Carte, on_delete=models.CASCADE)
    Nota = models.IntegerField()
    Comentariu = models.TextField()
    Data_Recenzie = models.DateField()
