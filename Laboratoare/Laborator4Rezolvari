1.
Task admin (2p) PROIECT
Creati un super user pentru site-ul vostru.
python manage.py createsuperuser

Din panoul admin realizati interfete pentru toate modelele
Intram in Admin

Introduceti date pentru toate modelele.
Intram in Admin

Schimbati ordinea afisarii campurilor pentru minim unul dintre modele
class AlbumMuzicalAdmin(admin.ModelAdmin):
    ordering= ['-Pret']
    fieldsets = (
        ('Informații despre Album', {
            'fields': ('Titlu', 'An','DurataAlbum','NumarPiese','GenAlbum','EsteRomanesc'),
        }),
        ('Altele', {
            'fields': ('Artist','Pret'),
        }),
    )

admin.site.register(AlbumMuzical,AlbumMuzicalAdmin)

Pentru fiecare model faceti un camp de cautare (search field) dupa nume, sau alta coloana relevanta.
class FilmAdmin(admin.ModelAdmin):
      search_fields = ('Titlu','ActorPrincial') 

admin.site.register(Film,FilmAdmin)

Adaugati filtre laterale pentru minim un model
class CarteAdmin(admin.ModelAdmin):
    list_filter = ('Titlu', 'An') 

admin.site.register(Carte,CarteAdmin)


Minim un model sa aiba campurile impartite in minim 2 sectiuni
class AlbumMuzicalAdmin(admin.ModelAdmin):
    ordering= ['-Pret']
    fieldsets = (
        ('Informații despre Album', {
            'fields': ('Titlu', 'An','DurataAlbum','NumarPiese','GenAlbum','EsteRomanesc'),
        }),
        ('Altele', {
            'fields': ('Artist','Pret'),
        }),
    )

Personalizati pagina de administrare schimband titlurile si headerul
admin.site.site_header = "Panou de Administrare Site"
admin.site.site_title = "Admin Site"
admin.site.index_title = "Bine ai venit în panoul de administrare"


2.
Task query sets (2p) PROIECT
Pentru tabelul de produse faceti cate un filtru pentru fiecare dintre coloane folosind query sets. Alegeti voi modul de filtrare in functie de tipul de coloana.
Implementati paginarea produselor (se vor afisa produsele pe pagini de cate 10, de exemplu, sau de cate 5).

views.py
def filtrare(request):
    filme=Film.objects.filter(Pret__lt=26.99).order_by('Pret')
    suma=filme.aggregate(Sum('Pret'))['Pret__sum']
    
    actor_principal = request.GET.get('actor_principal')
    if actor_principal:
        filme = filme.filter(ActorPrincial__iexact=actor_principal) 
    #daca parametrul actor_principal este prezent in Url, filtreaza filtrele pentru a include cele care au exact numele actorului
        
    ID_Film = request.GET.get('ID_Film')
    if ID_Film:
        filme = filme.filter(IDFilm__gt=ID_Film)
        
    ID_Produs = request.GET.get('ID_Produs')
    if ID_Produs:
        filme = filme.filter(IDProdus__lte=ID_Produs)
        
    Titlu = request.GET.get('Titlu')
    if Titlu:
        filme = filme.filter(Titlu__iexact=Titlu)
        
    Gen = request.GET.get('Gen')
    if Gen:
        filme = filme.filter(Gen__iexact=Gen)
        
    EsteRomanesc = request.GET.get('EsteRomanesc')
    if EsteRomanesc:
        filme = filme.filter(EsteRomanesc=True)
        
    Rating = request.GET.get('Rating')
    if Rating:
        filme = filme.filter(Rating__iexact=Rating)
        
    DescFilm = request.GET.get('DescriereFilm')
    if DescFilm:
        filme = filme.filter(DescriereFilm__icontains=DescFilm)
        
    paginator = Paginator(filme, 5) #creeaza un obiect Paginator care imparte filme in pagini de 5 filme fiecare
    page_number = request.GET.get('page') #obtine numarul paginii curente de exemplu http://127.0.0.1:8000/aplicatiedjango/filtrare/?page=2, page_number va fi 2
    filme = paginator.get_page(page_number) #aceasta linie obtine obiectele pentru pagina curenta, daca page_number= None returneaza prima pagina
        
    return render(request, 'aplicatiedjango/filtrare.html', {'filme': filme, 'suma': suma})


filtrare.html
<!DOCTYPE html>
<html>
<head>
    <title>Lista Film</title>
</head>
<body>
    <h1>Lista Film</h1>
    <ul>
        {% for film in filme %}
            <li>{{ film.Titlu }} - {{ film.ActorPrincipal }} - {{ film.Gen }} - {{ film.Pret }}</li>
        {% endfor %}
    </ul>
    <p>Suma totală este {{ suma }}</p>
</body>
</html>
